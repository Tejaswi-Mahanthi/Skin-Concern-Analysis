import streamlit as st
import cv2
import numpy as np
import torch
from ultralytics import YOLO
from PIL import Image
import firebase_admin
from firebase_admin import credentials, firestore

# Load YOLOv8 models
skin_type_model = YOLO(r"C:\Users\HP\Downloads\best (8).pt")  # Classification Model for Skin Type
skin_problem_model = YOLO(r"C:\Users\HP\Downloads\best (9).pt")  # Segmentation Model for Skin Problems

# Firebase Setup
firebase_key_path = r"C:\Users\HP\PycharmProjects\Skin Disease Prediction\firebase_key.json"
if not firebase_admin._apps:
    cred = credentials.Certificate(firebase_key_path)
    firebase_admin.initialize_app(cred)

db = firestore.client()

CATEGORY_NAMES = {
    0: "Acne", 1: "Dark Circle", 2: "Dark Spot", 3: "Dry Skin",
    4: "Normal Skin", 5: "Oily Skin", 6: "Pores",
    7: "Skin Redness", 8: "Wrinkles"
}

CATEGORY_COLORS = {
    0: (0, 0, 255), 1: (128, 0, 128), 2: (0, 0, 128), 3: (165, 42, 42),
    4: (0, 255, 0), 5: (255, 165, 0), 6: (255, 255, 0),
    7: (255, 0, 0), 8: (192, 192, 192)
}

st.set_page_config(page_title="Skin Analysis App", layout="wide")

st.markdown("""
    <style>
        .block-container { padding-top: 0 !important; margin-top: 0 !important; }
        header { visibility: hidden; height: 0px; }  
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #A94064;
            padding: 8px 20px;
            box-shadow: 0px 3px 5px rgba(0, 0, 0, 0.1);
            z-index: 9999;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .service-number { color: white; font-size: 16px; font-weight: bold; margin-left: 15px; }
        .brand-name { color: white; font-size: 22px; font-weight: bold; text-align: center; flex-grow: 1; }
        .right-section { display: flex; align-items: center; gap: 15px; margin-right: 15px; }
        .search-bar {
            padding: 6px 12px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            width: 250px;
        }
        .icon { font-size: 20px; color: white; cursor: pointer; }
        .menu-bar {
            position: fixed;
            top: 48px;
            left: 0;
            width: 100%;
            background-color: #FFF5E1;
            padding: 10px 0;
            text-align: center;
            display: flex;
            justify-content: center;
            gap: 40px;
            font-size: 18px;
            font-weight: bold;
            color: #333;
            z-index: 9998;
        }
        .menu-bar span { cursor: pointer; padding: 5px 15px; }
        .menu-bar span:hover { color: #A94064; }
        .content { padding-top: 90px; }
    </style>
""", unsafe_allow_html=True)

# Navigation Bar
st.markdown("""
    <div class="navbar">
        <div class="service-number">üìû Service Number: 1234567890</div>
        <div class="brand-name">AnSkin</div>
        <div class="right-section">
            <input type="text" class="search-bar" placeholder="üîç Search">
            <span class="icon">‚ù§Ô∏è</span>
            <span class="icon">üõã</span>
        </div>
    </div>
""", unsafe_allow_html=True)

st.markdown("""
    <div class="menu-bar">
        <span>Capture</span>
        <span>Browse</span>
        <span>QR</span>
        <span>Chat</span>
    </div>
""", unsafe_allow_html=True)

st.markdown("<div class='content'></div>", unsafe_allow_html=True)

# Quote Section
st.markdown("""
    <div style="text-align: center; font-size: 22px; font-weight: bold; color: #A94064; margin-top: 40px;">
        "The best makeup foundation you can wear is glowing skin, and that skin can be achieved by AnSkin."
    </div>
""", unsafe_allow_html=True)
# Upload Image
uploaded_file = st.file_uploader("Upload an Image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Run Skin Type Classification
    classification_results = skin_type_model(image)
    skin_type = classification_results[0].names[classification_results[0].probs.top1]

    # Run Skin Problem Detection
    results = skin_problem_model(image)

    # Create two columns: one for image, one for analysis summary
    col1, col2 = st.columns([1, 1])

    with col1:
        # Resize and Display Original Image
        resized_image = cv2.resize(image, (250, 200))
        st.subheader("Original Image")
        st.image(Image.fromarray(resized_image), caption="Uploaded Image", use_container_width=False)

    with col2:
        # Analysis Summary
        st.subheader("üìù Analysis Summary")

        # Dictionary to hold masks per category
        category_masks = {cls: np.zeros_like(image, dtype=np.uint8) for cls in CATEGORY_NAMES.keys()}
        detected_conditions = set()

        for result in results:
            if hasattr(result, "masks") and result.masks is not None:
                for seg_mask, cls in zip(result.masks.xy, result.boxes.cls):
                    points = np.array([seg_mask], np.int32)
                    cls_id = int(cls)
                    color = CATEGORY_COLORS.get(cls_id, (255, 255, 255))
                    cv2.fillPoly(category_masks[cls_id], points, color)
                    detected_conditions.add(cls_id)

        # Categorize detected conditions
        skin_problems = []

        for cls_id in detected_conditions:
            category_name = CATEGORY_NAMES[cls_id]
            if category_name not in ["Normal Skin", "Oily Skin",
                                     "Dry Skin"]:  # Since skin type is classified separately
                skin_problems.append(category_name)

        # Create two columns for Skin Type and Skin Problems
        col_skin_type, col_skin_problems = st.columns(2)

        with col_skin_type:
            st.markdown("### üåø Skin Type")
            st.markdown(f"- ‚úÖ {skin_type}")

        with col_skin_problems:
            st.markdown("### ‚ö†Ô∏è Skin Problems")
            if skin_problems:
                for problem in skin_problems:
                    st.markdown(f"- ‚ùå {problem}")
            else:
                st.success("No major skin problems detected!")

    # Display segmented images for each detected category with recommended products
    for cls_id in detected_conditions:
        col1, col2 = st.columns([1, 1])

        with col1:
            st.subheader(f"Segmented Image for {CATEGORY_NAMES[cls_id]}")
            segmented_img = cv2.addWeighted(image, 0.7, category_masks[cls_id], 0.3, 0)
            resized_segmented_img = cv2.resize(segmented_img, (250, 200))
            st.image(Image.fromarray(resized_segmented_img), caption=f"{CATEGORY_NAMES[cls_id]}",
                     use_container_width=False)

        with col2:
            st.subheader(f"üõçÔ∏è Recommended Products for {CATEGORY_NAMES[cls_id]}")

            products_ref = db.collection('Products').where("Problem", "==", CATEGORY_NAMES[cls_id])
            products = list(products_ref.stream())  # Convert to list to determine count

            if products:
                num_cols = min(len(products), 3)  # Limit columns to a max of 3 per row
                product_cols = st.columns(num_cols)  # Create columns dynamically

                for index, product in enumerate(products):
                    product_data = product.to_dict()

                    with product_cols[index % num_cols]:  # Distribute products evenly across columns
                        st.markdown(f"**{product_data.get('Product', 'Unnamed Product')}**")
                        st.write(product_data.get('Description', 'No description available.'))
                        st.image(product_data.get('Img_URL', ''), width=120)
                        st.write(f"üí∞ Price: ‚Çπ{product_data.get('Price', 'N/A')}")
                        st.markdown(f"[üõí Buy Now]({product_data.get('Prod_URL', '#')})", unsafe_allow_html=True)
